{"version":3,"sources":["components/ContentArea.js","components/useContext/ThemeContext.js","components/useContext/ThemedButton.js","components/useContext/ButtonWrapper.js","components/useContext/UseContextExample.js","components/useReducer/actions.js","components/useReducer/DataContext.js","components/useReducer/Child1.js","components/useReducer/Child2.js","components/useReducer/reducers.js","components/useReducer/ReducerContainer.js","App.js","serviceWorker.js","index.js"],"names":["ContentArea","props","className","children","themes","data","id","ThemeContext","React","createContext","ThemedButton","theme","useContext","ButtonWrapper","Toolbar","UseContextExample","Provider","value","addAction","type","minusAction","resetAction","DataContext","Child1","context","state","dispatch","number","onClick","mathReducer","action","console","log","Error","ReducerContainer","useReducer","Child2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mLAUeA,MARf,SAAqBC,GACnB,OACE,yBAAKC,UAAU,aACZD,EAAME,WCFAC,EAAS,CACpBC,KAAM,MACNC,GAAI,GAGOC,EAAeC,IAAMC,cAAcL,GCMjCM,MAXf,WACE,IAAMC,EAAQC,qBAAWL,GAEzB,OACE,6BACE,oCAAUI,EAAML,IAChB,sCAAYK,EAAMN,QCETQ,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMN,SAASC,EAAQb,GACf,OACE,6BACE,yDACA,kBAAC,EAAD,OAKSc,MAjBf,WACE,OACE,kBAACR,EAAaS,SAAd,CAAuBC,MAAOb,GAC5B,kBAACU,EAAD,Q,OCNAI,EAAY,CAChBC,KAAM,MACNd,KAAM,GAGFe,EAAc,CAClBD,KAAM,QACNd,KAAM,GAGFgB,EAAc,CAClBF,KAAM,QACNd,KAAM,KCNKiB,EAAcd,IAAMC,cAAc,ICehCc,MAlBf,WACE,IAAMC,EAAUhB,IAAMI,WAAWU,GAC1BG,EAASD,EAATC,MACAC,EAAYF,EAAZE,SAMP,OACE,8CAEE,8CAAoBD,EAAME,QAC1B,4BAAQzB,UAAU,wBAAwB0B,QARhC,WACZF,EAASR,KAOP,SCKSK,MAlBf,WACE,IAAMC,EAAUhB,IAAMI,WAAWU,GAC1BG,EAASD,EAATC,MACAC,EAAYF,EAAZE,SAMP,OACE,8CAEE,8CAAoBD,EAAME,QAC1B,4BAAQzB,UAAU,wBAAwB0B,QARhC,WACZF,EAASN,KAOP,W,OCjBAS,EAAc,SAACJ,EAAOK,GAG1B,OAFAC,QAAQC,IAAI,UAAWP,EAAOK,GAEtBA,EAAOX,MAKb,IAAK,MAEH,OADAM,EAAME,QAAU,EACT,eAAIF,GACb,IAAK,QAEH,OADAA,EAAME,QAAU,EACT,eAAIF,GACb,IAAK,QAEH,OADAA,EAAME,OAASG,EAAOzB,KACf,eAAIoB,GACb,QACE,MAAM,IAAIQ,QCiBDC,MAzBf,WACE,IAD0B,EAID1B,IAAM2B,WAAWN,EAHzB,CACfF,OAAQ,KAFgB,mBAInBF,EAJmB,KAIbC,EAJa,KAS1B,OACE,kBAACJ,EAAYN,SAAb,CAAsBC,MAAO,CAACQ,QAAOC,aACnC,6BAEE,yDACA,4BAAQxB,UAAU,kBAAkB0B,QAT5B,WACZF,EAASL,KAQL,gBAGA,yBAAKnB,UAAU,iBAAf,uBAAoDuB,EAAME,OAA1D,KACA,kBAAC,EAAD,MACA,kBAACS,EAAD,SCVOC,MAdf,WACE,OACE,kBAAC,EAAD,KACI,yBAAKnC,UAAU,iBACf,kBAAC,EAAD,OAGA,yBAAKA,UAAU,iBACf,kBAAC,EAAD,SCDYoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.72b7fe11.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ContentArea(props) {\n  return (\n    <div className=\"container\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default ContentArea;\n","import React from 'react';\n\n\nexport const themes = {\n  data: '123',\n  id: 1\n};\n\nexport const ThemeContext = React.createContext(themes);\n\n// when use context hook\n// always parse the context object as well as value of the context","import React, {useContext} from 'react';\nimport {ThemeContext} from './ThemeContext';\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  \n  return (\n    <div>\n      <div>id: {theme.id}</div>\n      <div>data: {theme.data}</div>\n    </div>\n  );\n}\n\nexport default ThemedButton;","import React from 'react';\nimport ThemedButton from './ThemedButton';\n\nfunction ButtonWrapper() {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nexport default ButtonWrapper;","import React from 'react';\nimport ButtonWrapper from './ButtonWrapper';\nimport {ThemeContext, themes } from './ThemeContext';\n\nfunction UseContextExample() {\n  return (\n    <ThemeContext.Provider value={themes}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <h3>Simple useContext Example</h3>\n      <ButtonWrapper />\n    </div>\n  );\n}\n\nexport default UseContextExample;","// these are all actions\nconst addAction = {\n  type: \"add\",\n  data: 1,\n}\n\nconst minusAction = {\n  type: \"minus\",\n  data: 1,\n}\n\nconst resetAction = {\n  type: \"reset\",\n  data: 100,\n}\n\nexport {\n  addAction,\n  minusAction,\n  resetAction\n}","import React from 'react';\n\nexport const dataStore = {\n  name: 'dataStore',\n  data: 100\n}\n\nexport const DataContext = React.createContext({});","import React, { useEffect } from 'react';\nimport {addAction} from './actions';\nimport {DataContext, dataStore} from './DataContext';\n\nfunction Child1() {\n  const context = React.useContext(DataContext);\n  const {state} = context;\n  const {dispatch} = context;\n\n  const click = () => {\n    dispatch(addAction)\n  }\n\n  return (\n    <div>\n      this is Child1 \n      <div>Current Data: {state.number}</div>\n      <button className=\"btn btn-primary w-100\" onClick={click}>ADD</button>\n    </div>\n  );\n}\n\nexport default Child1;","import React, { useEffect } from 'react';\nimport {addAction, minusAction} from './actions';\nimport {DataContext, dataStore} from './DataContext';\n\nfunction Child1() {\n  const context = React.useContext(DataContext);\n  const {state} = context;\n  const {dispatch} = context;\n  \n  const click = () => {\n    dispatch(minusAction)\n  }\n\n  return (\n    <div>\n      this is Child2\n      <div>Current Data: {state.number}</div>\n      <button className=\"btn btn-primary w-100\" onClick={click}>MINUS</button>\n    </div>\n  );\n}\n\nexport default Child1;","const mathReducer = (state, action) => {\n  console.log('reducer', state, action);\n  \n  switch (action.type) {\n    // {...state} == state 不等\n    // 所以要遍历 所有对象 属性 进而重构对象\n    // console.log('{...state} == state', {...state} == state);\n    // console.log({...state}, state);\n    case 'add':\n      state.number += 1;\n      return {...state};\n    case 'minus':\n      state.number -= 1;\n      return {...state};\n    case 'reset':\n      state.number = action.data;\n      return {...state};\n    default:\n      throw new Error();\n  }\n}\n\nexport {\n  mathReducer,\n}","import React, { useEffect } from 'react';\nimport Child1 from './Child1';\nimport Child2 from './Child2';\nimport {DataContext, dataStore} from './DataContext';\nimport {resetAction} from './actions';\nimport {mathReducer} from './reducers';\n// 此应用场景 可为 自组件 consume 全局数据 \n// 如 shopping cart 与 item share global level 的数据\n\n\nfunction ReducerContainer() {\n  const initData = {\n    number: 10\n  };\n  const [state,dispatch] = React.useReducer(mathReducer,initData);\n  const click = () => {\n    dispatch(resetAction);\n  }\n\n  return (\n    <DataContext.Provider value={{state, dispatch}}>\n      <div>\n        \n        <h3>Simple useReducer Example</h3>\n        <button className=\"btn btn-primary\" onClick={click}>\n          RESET NUMBER\n        </button>\n        <div className=\"card p-3 my-3\">current data store: {state.number} </div>\n        <Child1 />\n        <Child2 />\n      </div>\n    </DataContext.Provider>\n  );\n}\n\nexport default ReducerContainer;","import React from 'react';\nimport ContentArea from './components/ContentArea';\nimport UseContextExample from './components/useContext/UseContextExample';\nimport ReducerContainer from './components/useReducer/ReducerContainer';\n\nfunction App() {\n  return (\n    <ContentArea>\n        <div className=\"card p-3 mt-3\">\n        <UseContextExample />\n        </div>\n\n        <div className=\"card p-3 mt-3\">\n        <ReducerContainer />\n        </div>\n    </ContentArea>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}